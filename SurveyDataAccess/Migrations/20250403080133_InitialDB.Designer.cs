// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveyDataAccess;

#nullable disable

namespace SurveyDataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250403080133_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SurveyDataAccess.DTOs.AnswerDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<byte?>("Point")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionGroupId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Table_Answers", (string)null);
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.ParticipantDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyFormId");

                    b.ToTable("Table_Participants", (string)null);
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.PredefinedAnswerDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Point")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Table_PredefinedAnswers", (string)null);
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.QuestionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChartLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionGroupId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionGroupId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Table_Questions", (string)null);
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.QuestionGroupDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Table_QuestionGroups", (string)null);
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.QuestionTypeDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Table_QuestionTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 4, 3, 15, 1, 32, 962, DateTimeKind.Local).AddTicks(8880),
                            Description = "Câu hỏi đóng (Closed-ended question) – Chỉ có các câu trả lời sẵn.",
                            IsActive = true,
                            Name = "Câu hỏi đóng"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 4, 3, 15, 1, 32, 963, DateTimeKind.Local).AddTicks(8267),
                            Description = "Câu hỏi mở (Open-ended question) – Người dùng nhập câu trả lời.",
                            IsActive = true,
                            Name = "Câu hỏi mở"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 4, 3, 15, 1, 32, 963, DateTimeKind.Local).AddTicks(8276),
                            Description = "Câu hỏi kết hợp (Hybrid question) hoặc Câu hỏi mở rộng (Extended question) – Vừa có câu trả lời sẵn, vừa cho phép người dùng nhập câu trả lời riêng.",
                            IsActive = true,
                            Name = "Câu hỏi kết hợp"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 4, 3, 15, 1, 32, 963, DateTimeKind.Local).AddTicks(8277),
                            Description = "Cẩu hỏi đáng giá (rating question) - Cho người dùng đánh giá mức độ trên 5 sao.",
                            IsActive = true,
                            Name = "Câu hỏi đánh giá"
                        });
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.SurveyFormDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescriptionVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPeriodic")
                        .HasColumnType("bit");

                    b.Property<int?>("MallId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TitleVN")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Table_SurveyForms", (string)null);
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.SurveyQuestionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestionGroupId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyFormId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyFormId");

                    b.ToTable("Table_SurveyQuestions", (string)null);
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.AnswerDTO", b =>
                {
                    b.HasOne("SurveyDataAccess.DTOs.ParticipantDTO", "Participant")
                        .WithMany("Answers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.ParticipantDTO", b =>
                {
                    b.HasOne("SurveyDataAccess.DTOs.SurveyFormDTO", "SurveyForm")
                        .WithMany("Participants")
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyForm");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.PredefinedAnswerDTO", b =>
                {
                    b.HasOne("SurveyDataAccess.DTOs.QuestionDTO", "Question")
                        .WithMany("PredefinedAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.QuestionDTO", b =>
                {
                    b.HasOne("SurveyDataAccess.DTOs.QuestionGroupDTO", "QuestionGroup")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyDataAccess.DTOs.QuestionTypeDTO", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionGroup");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.SurveyQuestionDTO", b =>
                {
                    b.HasOne("SurveyDataAccess.DTOs.QuestionDTO", "Question")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyDataAccess.DTOs.SurveyFormDTO", "SurveyFrom")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("SurveyFrom");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.ParticipantDTO", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.QuestionDTO", b =>
                {
                    b.Navigation("PredefinedAnswers");

                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.QuestionGroupDTO", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.QuestionTypeDTO", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SurveyDataAccess.DTOs.SurveyFormDTO", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("SurveyQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
